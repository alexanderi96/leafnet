{{template "main" .}}
{{define "content"}}
<div class="container center-block mt-3">
  <div class="row">
    <div class="card col-lg shadow">
      <div id="graph"></div>

      <script type="importmap">{ "imports": { "three": "https://unpkg.com/three/build/three.module.js" }}</script>
      <script type="module">
        import { CSS2DRenderer, CSS2DObject } from '//unpkg.com/three/examples/jsm/renderers/CSS2DRenderer.js';

        // controls
        const controls = { 'DAG Orientation': 'td' };
        const gui = new dat.GUI();
        gui.add(controls, 'DAG Orientation', ['td', 'bu', 'lr', 'rl', 'zout', 'zin', 'radialout', 'radialin', null])
          .onChange(orientation => graph && graph.dagMode(orientation));

        // graph config
        //const NODE_REL_SIZE = 5;
        //const Y_POSITION_CONSTANT = 1;
        const graph = ForceGraph3D({
          extraRenderers: [new CSS2DRenderer()]
        })
          .dagMode(null)
          .dagLevelDistance(100)
          // .backgroundColor('#101020')
          .linkColor(() => 'rgba(255,255,255,0.8)')
          // .nodeRelSize(NODE_REL_SIZE)
          // .nodeId('id')
          // .nodeVal('value')
          // .nodeLabel('name')
          // .nodeAutoColorBy('last_name')
          .nodeOpacity(0.9)
          .linkDirectionalParticles(2)
          .linkDirectionalParticleWidth(0.8)
          .linkDirectionalParticleSpeed(0.005)
          //.d3Force('collision', d3.forceCollide(node => Math.cbrt(node.size) * NODE_REL_SIZE - 2))
          .d3VelocityDecay(0.5);

        // Decrease repel intensity
        // graph.d3Force('charge').strength(-15);

        // graph.d3Force('link')
        //   .distance(link => 0.9)
        //   .strength(link => 0.1);


        function getData(persons) {
          const nodes = [];
          const links = [];

          // Crea un oggetto per ogni persona e lo aggiunge all'array nodes
          persons.forEach((person) => {
            const node = {
              id: person.uuid,
              name: person.first_name + " " + person.last_name,
              last_name: person.last_name,
              size: 100,
            };

            nodes.push(node);
          });

          // Aggiunge i collegamenti ai genitori all'array links
          persons.forEach((person) => {
            if (person.parent1) {
              links.push({
                source: person.parent1,
                target: person.uuid
              });
            }
            if (person.parent2) {
              links.push({
                source: person.parent2,
                target: person.uuid
              });
            }
          });

          return {
            nodes: nodes,
            links: links
          };
        }

        graph(document.getElementById('graph'))
          .graphData(getData({{.Persons }}))
          .nodeAutoColorBy('last_name')
          .nodeThreeObject(node => {
            const nodeEl = document.createElement('div');
            nodeEl.textContent = node.name;
            nodeEl.style.color = node.color;
            nodeEl.className = 'node-label';
            return new CSS2DObject(nodeEl);
          })
          .nodeThreeObjectExtend(true)
          .onNodeClick(node => document.location.href = "/manageperson?uuid=" + node.id);
      </script>
    </div>
  </div>
</div>
{{end}}