{{template "main" .}}
{{define "content"}}
<div id="graph" style="position: relative;"></div>
<div style="position: absolute; z-index: 1; top: 70px; left: 10px;">
  <div style="display: flex; align-items: center; justify-content: space-between;">
    <button class="btn btn-secondary" type="button" data-bs-toggle="collapse" data-bs-target="#collapseWidthExample" aria-expanded="false" aria-controls="collapseWidthExample" style="margin-right: 10px;">
      <i class="bi bi-gear"></i>
    </button>
    <input type="text" id="search-input" class="form-control" placeholder="Search nodes...">
  </div>
  <div style="min-height: 120px;">
    <div class="collapse collapse-horizontal" id="collapseWidthExample">
      <div class="card card-body" style="width: 300px; margin-top: 10px;">
        <label for="orientation-select" class="form-label">Graph Orientation</label>
        <select id="orientation-select" class="form-select">
          <option value="td">Top-Down</option>
          <option value="bu">Bottom-Up</option>
          <option value="lr">Left-Right</option>
          <option value="rl">Right-Left</option>
          <option value="zout">Z-out</option>
          <option value="zin">Z-in</option>
          <option value="radialout">Radial-Out</option>
          <option value="radialin">Radial-In</option>
          <option value="null" selected>None</option>
        </select>
        <br>
        <label for="link-strength" class="form-label">Link Strength</label>
        <input type="range" class="form-range" id="link-strength" min="0.1" max="1" step="0.1">
        <br>
        <label for="link-distance" class="form-label">Link Distance</label>
        <input type="range" class="form-range" id="link-distance" min="0" max="100">
        <br>
        <label for="node-charge" class="form-label">Node Charge Force</label>
        <input type="range" class="form-range" id="node-charge" min="-15" max="15">
        <br>
        <label class="form-label">Show Node Labels</label>
        <input type="checkbox" class="form-check-input" id="show-node-labels" checked>
    </div>
  </div>
</div>


<script type="importmap">{ "imports": { "three": "https://unpkg.com/three/build/three.module.js" }}</script>
<script type="module">
  import { CSS2DRenderer, CSS2DObject } from '//unpkg.com/three/examples/jsm/renderers/CSS2DRenderer.js';
  
  // Change the graph orientation based on the settings
  const orientationSelect = document.getElementById('orientation-select');
  orientationSelect.addEventListener('change', (e) => {
    const orientation = e.target.value;
    graph && graph.dagMode(orientation);
  });

  // Event listener for Link Strength slider
  const linkStrengthSlider = document.getElementById('link-strength');
  linkStrengthSlider.addEventListener('input', (e) => {
    const strength = e.target.value;
    graph.d3Force('link').strength(+strength);
    graph.numDimensions(3);
  });

  // Event listener for Link Distance slider
  const linkDistanceSlider = document.getElementById('link-distance');
  linkDistanceSlider.addEventListener('input', (e) => {
    const distance = e.target.value;
    graph.d3Force('link').distance(+distance);
    graph.numDimensions(3);
  });

  // Event listener for Node Charge slider
  const nodeChargeSlider = document.getElementById('node-charge');
  nodeChargeSlider.addEventListener('input', (e) => {
    const distance = e.target.value;
    graph.d3Force('charge').strength(+distance);
    graph.numDimensions(3);
  });

  const searchInput = document.getElementById('search-input');

  searchInput.addEventListener('input', (e) => {
    const searchTerm = e.target.value.toLowerCase();

    if (searchTerm === '') {
      graph.nodeVisibility(() => true);
    } else {
      graph.nodeVisibility(node => {
        const nodeLabel = node.label.toLowerCase();
        return nodeLabel.includes(searchTerm);
      });
    }

    graph.refresh();
  });

  const showNodeLabelsCheckbox = document.getElementById('show-node-labels');
  showNodeLabelsCheckbox.addEventListener('change', (e) => {
    showNodeLabels = e.target.checked;
    graph.nodeLabel(node => getLabel(node));
    refreshNodeLabels();
  });

  function refreshNodeLabels() {
    graph.nodeThreeObject(graph.nodeThreeObject()); // Aggiorna la funzione nodeThreeObject
  }

  function getLabel(node) {
  if (!showNodeLabels) {
    return node.label;
  } else {
    return null;
  }
}
  
  // graph config
  let showNodeLabels = true;
  const NODE_REL_SIZE = 5;
  const graph = ForceGraph3D({
    extraRenderers: [new CSS2DRenderer()],
    // controlType: 'fly'
  })
    .dagMode(null)
    .dagLevelDistance(100)
    .backgroundColor('#101020')
    .linkColor(() => 'rgba(255,255,255,0.5)')
    .nodeRelSize(NODE_REL_SIZE)
    .nodeId('id')
    .nodeOpacity(0.9)
    .linkDirectionalParticles(2)
    .linkDirectionalParticleColor(() => 'rgba(255,255,255,1)')
    .linkDirectionalParticleWidth(2)
    .linkDirectionalParticleSpeed(0.002)
    .linkWidth(2);

  function getData(persons) {
    const nodes = [];
    const links = [];
    
    persons.forEach((person) => {
      const node = {
        id: person.uuid,
        label: person.first_name + " " + person.last_name,
        last_name: person.last_name,
        parent1: person.parent1, // parent1 uuid
        parent2: person.parent2, // parent2 uuid
      };

      nodes.push(node);
      
      if (person.parent1) {
        links.push({
          source: person.parent1,
          target: person.uuid
        });
      }
      if (person.parent2) {
        links.push({
          source: person.parent2,
          target: person.uuid
        });
      }
    });

    return {
      nodes: nodes,
      links: links
    };
  }

  graph(document.getElementById('graph'))
    .graphData(getData({{.Persons}}))
    .nodeAutoColorBy('last_name')
    .nodeThreeObject(node => {
      if (!showNodeLabels) {
        return null;
      }

      const nodeEl = document.createElement('div');
      nodeEl.textContent = node.label;
      nodeEl.style.color = node.color;
      nodeEl.className = 'node-label';
      return new CSS2DObject(nodeEl);
    })
    .nodeThreeObjectExtend(true)
    .onNodeClick(node => document.location.href = "/manage-person?uuid=" + node.id);
</script>
{{end}}